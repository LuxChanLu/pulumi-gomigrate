// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gomigrate
{
    [GomigrateResourceType("gomigrate:index:Migrations")]
    public partial class Migrations : Pulumi.ComponentResource
    {
        /// <summary>
        /// Create a Migrations resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Migrations(string name, MigrationsArgs args, ComponentResourceOptions? options = null)
            : base("gomigrate:index:Migrations", name, args ?? new MigrationsArgs(), MakeResourceOptions(options, ""), remote: true)
        {
        }

        private static ComponentResourceOptions MakeResourceOptions(ComponentResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new ComponentResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/LuxChanLu",
            };
            var merged = ComponentResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class MigrationsArgs : Pulumi.ResourceArgs
    {
        [Input("databaseURL", required: true)]
        private Input<string>? _databaseURL;

        /// <summary>
        /// Database URL to run the migrations on
        /// </summary>
        public Input<string>? DatabaseURL
        {
            get => _databaseURL;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _databaseURL = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("sourceURL", required: true)]
        private Input<string>? _sourceURL;

        /// <summary>
        /// Source URL for the migrations
        /// </summary>
        public Input<string>? SourceURL
        {
            get => _sourceURL;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sourceURL = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public MigrationsArgs()
        {
        }
    }
}
