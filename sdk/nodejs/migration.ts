// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Migration extends pulumi.CustomResource {
    /**
     * Get an existing Migration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Migration {
        return new Migration(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gomigrate:index:Migration';

    /**
     * Returns true if the given object is an instance of Migration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Migration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Migration.__pulumiType;
    }

    /**
     * Date of the migration
     */
    public /*out*/ readonly migratedAt!: pulumi.Output<string>;

    /**
     * Create a Migration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MigrationArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.databaseURL === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseURL'");
            }
            if ((!args || args.prevVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'prevVersion'");
            }
            if ((!args || args.sourceURL === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceURL'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["databaseURL"] = args?.databaseURL ? pulumi.secret(args.databaseURL) : undefined;
            resourceInputs["prevVersion"] = args ? args.prevVersion : undefined;
            resourceInputs["sourceURL"] = args?.sourceURL ? pulumi.secret(args.sourceURL) : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["migratedAt"] = undefined /*out*/;
        } else {
            resourceInputs["migratedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Migration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Migration resource.
 */
export interface MigrationArgs {
    /**
     * Database URL to run the migrations on
     */
    databaseURL: pulumi.Input<string>;
    /**
     * Previous version to migrate on undo
     */
    prevVersion: pulumi.Input<number>;
    /**
     * Source URL for the migrations
     */
    sourceURL: pulumi.Input<string>;
    /**
     * Version to migrate
     */
    version: pulumi.Input<number>;
}
