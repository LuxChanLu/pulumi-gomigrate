// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gomigrate

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Migrations struct {
	pulumi.ResourceState
}

// NewMigrations registers a new resource with the given unique name, arguments, and options.
func NewMigrations(ctx *pulumi.Context,
	name string, args *MigrationsArgs, opts ...pulumi.ResourceOption) (*Migrations, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseURL == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseURL'")
	}
	if args.SourceURL == nil {
		return nil, errors.New("invalid value for required argument 'SourceURL'")
	}
	if args.DatabaseURL != nil {
		args.DatabaseURL = pulumi.ToSecret(args.DatabaseURL).(pulumi.StringOutput)
	}
	if args.SourceURL != nil {
		args.SourceURL = pulumi.ToSecret(args.SourceURL).(pulumi.StringOutput)
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Migrations
	err := ctx.RegisterRemoteComponentResource("gomigrate:index:Migrations", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type migrationsArgs struct {
	// Database URL to run the migrations on
	DatabaseURL string `pulumi:"databaseURL"`
	// Source URL for the migrations
	SourceURL string `pulumi:"sourceURL"`
}

// The set of arguments for constructing a Migrations resource.
type MigrationsArgs struct {
	// Database URL to run the migrations on
	DatabaseURL pulumi.StringInput
	// Source URL for the migrations
	SourceURL pulumi.StringInput
}

func (MigrationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*migrationsArgs)(nil)).Elem()
}

type MigrationsInput interface {
	pulumi.Input

	ToMigrationsOutput() MigrationsOutput
	ToMigrationsOutputWithContext(ctx context.Context) MigrationsOutput
}

func (*Migrations) ElementType() reflect.Type {
	return reflect.TypeOf((**Migrations)(nil)).Elem()
}

func (i *Migrations) ToMigrationsOutput() MigrationsOutput {
	return i.ToMigrationsOutputWithContext(context.Background())
}

func (i *Migrations) ToMigrationsOutputWithContext(ctx context.Context) MigrationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationsOutput)
}

// MigrationsArrayInput is an input type that accepts MigrationsArray and MigrationsArrayOutput values.
// You can construct a concrete instance of `MigrationsArrayInput` via:
//
//          MigrationsArray{ MigrationsArgs{...} }
type MigrationsArrayInput interface {
	pulumi.Input

	ToMigrationsArrayOutput() MigrationsArrayOutput
	ToMigrationsArrayOutputWithContext(context.Context) MigrationsArrayOutput
}

type MigrationsArray []MigrationsInput

func (MigrationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Migrations)(nil)).Elem()
}

func (i MigrationsArray) ToMigrationsArrayOutput() MigrationsArrayOutput {
	return i.ToMigrationsArrayOutputWithContext(context.Background())
}

func (i MigrationsArray) ToMigrationsArrayOutputWithContext(ctx context.Context) MigrationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationsArrayOutput)
}

// MigrationsMapInput is an input type that accepts MigrationsMap and MigrationsMapOutput values.
// You can construct a concrete instance of `MigrationsMapInput` via:
//
//          MigrationsMap{ "key": MigrationsArgs{...} }
type MigrationsMapInput interface {
	pulumi.Input

	ToMigrationsMapOutput() MigrationsMapOutput
	ToMigrationsMapOutputWithContext(context.Context) MigrationsMapOutput
}

type MigrationsMap map[string]MigrationsInput

func (MigrationsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Migrations)(nil)).Elem()
}

func (i MigrationsMap) ToMigrationsMapOutput() MigrationsMapOutput {
	return i.ToMigrationsMapOutputWithContext(context.Background())
}

func (i MigrationsMap) ToMigrationsMapOutputWithContext(ctx context.Context) MigrationsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationsMapOutput)
}

type MigrationsOutput struct{ *pulumi.OutputState }

func (MigrationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Migrations)(nil)).Elem()
}

func (o MigrationsOutput) ToMigrationsOutput() MigrationsOutput {
	return o
}

func (o MigrationsOutput) ToMigrationsOutputWithContext(ctx context.Context) MigrationsOutput {
	return o
}

type MigrationsArrayOutput struct{ *pulumi.OutputState }

func (MigrationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Migrations)(nil)).Elem()
}

func (o MigrationsArrayOutput) ToMigrationsArrayOutput() MigrationsArrayOutput {
	return o
}

func (o MigrationsArrayOutput) ToMigrationsArrayOutputWithContext(ctx context.Context) MigrationsArrayOutput {
	return o
}

func (o MigrationsArrayOutput) Index(i pulumi.IntInput) MigrationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Migrations {
		return vs[0].([]*Migrations)[vs[1].(int)]
	}).(MigrationsOutput)
}

type MigrationsMapOutput struct{ *pulumi.OutputState }

func (MigrationsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Migrations)(nil)).Elem()
}

func (o MigrationsMapOutput) ToMigrationsMapOutput() MigrationsMapOutput {
	return o
}

func (o MigrationsMapOutput) ToMigrationsMapOutputWithContext(ctx context.Context) MigrationsMapOutput {
	return o
}

func (o MigrationsMapOutput) MapIndex(k pulumi.StringInput) MigrationsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Migrations {
		return vs[0].(map[string]*Migrations)[vs[1].(string)]
	}).(MigrationsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MigrationsInput)(nil)).Elem(), &Migrations{})
	pulumi.RegisterInputType(reflect.TypeOf((*MigrationsArrayInput)(nil)).Elem(), MigrationsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MigrationsMapInput)(nil)).Elem(), MigrationsMap{})
	pulumi.RegisterOutputType(MigrationsOutput{})
	pulumi.RegisterOutputType(MigrationsArrayOutput{})
	pulumi.RegisterOutputType(MigrationsMapOutput{})
}
